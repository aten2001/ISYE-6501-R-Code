




################################################################################

## Problem 3.1 (b) USING SVM

install.packages("kernlab")
library(kernlab)
library(ggplot2)
data <- read.table("credit_card_data.txt")

## Look at a sample of the data
head(data)

set.seed(1)
## Take a random sample of 60% of the data aside for training
mask_train <- sample(nrow(data), size = floor(nrow(data) * 0.6))

## Store this data in the 'train' dataframe
train <- data[mask_train,]

## Store the remaining 40% as 'leftover'
leftover <- data[-mask_train,]

## Divide the leftover by 2 and place one in validation and one in test
validation <- leftover[1:(nrow(leftover)/2),]
test <- leftover[((nrow(leftover)/2)+1):nrow(leftover),]

## make the results reproducible
set.seed(1)

## Create a sequence of values in magnitudes of 10 from 1e-08 to 1e+08 (17 values to test)
x <- 10^seq(-8, 8, 1)


## Look at how different values of 'x' passed to the 'C' argument in the ksvm model produce 
## different accuracy percentages on the validation data
accuracy <-sapply(x, function(x){
set.seed(1)
model_scaled <- ksvm(V11~.,data=train, ## Use the 60% training data
                     type = "C-svc", # Use C-classification method
                     kernel = "rbfdot",
                     C = x,
                     scaled=TRUE) # have ksvm scale the data for you

set.seed(1)
##  Predict on the validation data (20% of our 654 rows)
pred_scaled <- predict(model_scaled,validation[,1:10])

## Calculate the accuracy
sum(pred_scaled == validation$V11) / nrow(validation)
})

## Store the output of accuracy as a data.frame
as.data.frame(accuracy)

## Combine the sequence of x and the accuracy values for ggplot next
combined <- do.call(rbind, Map(data.frame, A=x, B=accuracy))

## take a look at combined
combined

## Plot x against the accuracy values
ggplot(data=combined,aes(A,B))+geom_point()



## It appears that a C value of 0.1 and 1 produce the highest accuracy of 82.44% when 
## looking at the validation data

set.seed(1)
## Now train the model using the determined value of C = (0.1)
model_highest_C <- ksvm(V11~.,data=train,
                     type = "C-svc", # Use C-classification method
                     kernel = "rbfdot", 
                     C = 0.1,
                     scaled=TRUE) # have ksvm scale the data for you

## Predict on an entirely unfamiliar dataset--'test'  the other 20% of our 
## 654 rows of data
set.seed(1)
pred_highest_C <- predict(model_highest_C,test[,1:10])

## What was the final accuracy of our model? In this case 90.8% 
sum(pred_highest_C == test$V11) / nrow(test)
